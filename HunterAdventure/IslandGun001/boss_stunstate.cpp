//================================================================================================================
//
// ボスの気絶状態処理 [boss_stunstate.cpp]
// Author：小原立暉
//
//================================================================================================================
//****************************************************************************************************************
//	インクルードファイル
//****************************************************************************************************************
#include "useful.h"
#include "boss.h"
#include "boss_stunstate.h"
#include "motion.h"

#include "boss_nonestate.h"

//----------------------------------------------------------------------------------------------------------------
// 無名名前空間
//----------------------------------------------------------------------------------------------------------------
namespace
{
	const int STUN_COUNT = 480;		// 気絶カウント
}

//==========================
// コンストラクタ
//==========================
CBossStunState::CBossStunState()
{
	// 全ての値をクリアする
	m_nCount = 0;			// 経過カウント
}

//==========================
// デストラクタ
//==========================
CBossStunState::~CBossStunState()
{

}

//==========================
// 状態処理
//==========================
void CBossStunState::Process(CBoss* pBoss)
{
	// 経過カウントを加算する
	m_nCount++;

	if (m_nCount >= STUN_COUNT)
	{ // 一定時間経過後

		// 気絶回復処理
		pBoss->StunRecovery();

		// 通常状態にする
		pBoss->ChangeState(new CBossNoneState);

		// この先の処理を行わない
		return;
	}
}

//==========================
// 情報の設定処理
//==========================
void CBossStunState::SetData(CBoss* pBoss)
{
	// 全ての値を設定する
	m_nCount = 0;			// 経過カウント

	if (pBoss->GetMotion()->GetType() != CBoss::MOTIONTYPE_DOWN)
	{ // ダウンモーション以外の場合

		// ダウンモーションを設定する
		pBoss->GetMotion()->Set(CBoss::MOTIONTYPE_DOWN);
	}
}